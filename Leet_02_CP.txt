Question : Merge Intervals (LeetCode)
Question Link : https://leetcode.com/problems/merge-intervals/


##--> Implementation using ArrayList.
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1)
        {
            return intervals;
        }
        
        Arrays.sort(intervals, (arr1, arr2) -> Integer.compare(arr1[0], arr2[0]));
        
        List<int[]> output_arr = new ArrayList<>();
        int[] current_interval = intervals[0];
        output_arr.add(current_interval);
        
        for(int[] interval : intervals)
        {
            int current_begin = current_interval[0];
            int current_end = current_interval[1];
            int next_begin = interval[0];
            int next_end = interval[1];
            
            if(current_end >= next_begin)
            {
                current_interval[1] = Math.max(current_end, next_end);
            }
            else
            {
                current_interval = interval;
                output_arr.add(current_interval);
            }
        }
        return output_arr.toArray(new int[output_arr.size()][]);
    }
}

##--> Implementation using Stack.
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1)
            return intervals;
        
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        Stack<int[]> stack = new Stack<>();
        stack.add(intervals[0]);
        
        for(int i = 1; i< intervals.length; i++)
        {
            int startPoint2 = intervals[i][0];
            int endPoint2 = intervals[i][1];
            
            int[] popArray = stack.pop();
            
            int startPoint1 = popArray[0];
            int endPoint1 = popArray[1];
            
            int maxEnd = Math.max(endPoint1, endPoint2);
            
            if(endPoint1 >= startPoint2)
            {
                int[] merge = new int[]{startPoint1, maxEnd};
                stack.add(merge);
            }
            else
            {
                stack.add(popArray);
                stack.add(intervals[i]);
            }
        }
        
        int[][] output = new int[stack.size()][2];
        
        for(int i = output.length-1; i >= 0; i--)
        {
            int[] popArray = stack.pop();
            output[i][0] = popArray[0];
            output[i][1] = popArray[1];
        }
        
        return output;
    }
}